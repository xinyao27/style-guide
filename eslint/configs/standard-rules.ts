import type { Linter } from 'eslint'

export const standardRules: Linter.RulesRecord = {
  indent: [
    'error',
    2,
    {
      ignoredNodes: [
        'TemplateLiteral *',
        'JSXElement',
        'JSXElement > *',
        'JSXAttribute',
        'JSXIdentifier',
        'JSXNamespacedName',
        'JSXMemberExpression',
        'JSXSpreadAttribute',
        'JSXExpressionContainer',
        'JSXOpeningElement',
        'JSXClosingElement',
        'JSXFragment',
        'JSXOpeningFragment',
        'JSXClosingFragment',
        'JSXText',
        'JSXEmptyExpression',
        'JSXSpreadChild',
      ],
      FunctionDeclaration: { parameters: 1, body: 1 },
      FunctionExpression: { parameters: 1, body: 1 },
      CallExpression: { arguments: 1 },
      offsetTernaryExpressions: true,
      flatTernaryExpressions: false,
      VariableDeclarator: 1,
      ignoreComments: false,
      ImportDeclaration: 1,
      MemberExpression: 1,
      ObjectExpression: 1,
      ArrayExpression: 1,
      outerIIFEBody: 1,
      SwitchCase: 1,
    },
  ],
  'spaced-comment': [
    'error',
    'always',
    {
      block: {
        markers: ['*package', '!', ',', ':', '::', 'flow-include'],
        exceptions: ['*'],
        balanced: true,
      },
      line: { markers: ['*package', '!', '/', ',', '='] },
    },
  ],

  'no-mixed-operators': [
    'error',
    {
      groups: [
        ['==', '!=', '===', '!==', '>', '>=', '<', '<='],
        ['&&', '||'],
        ['in', 'instanceof'],
      ],
      allowSamePrecedence: true,
    },
  ],
  'comma-dangle': [
    'error',
    {
      functions: 'never',
      objects: 'never',
      imports: 'never',
      exports: 'never',
      arrays: 'never',
    },
  ],
  'no-unused-vars': [
    'error',
    {
      ignoreRestSiblings: true,
      caughtErrors: 'none',
      args: 'none',
      vars: 'all',
    },
  ],
  'no-unused-expressions': [
    'error',
    {
      allowTaggedTemplates: true,
      allowShortCircuit: true,
      allowTernary: true,
    },
  ],
  camelcase: [
    'error',
    {
      allow: ['^UNSAFE_'],
      properties: 'never',
      ignoreGlobals: true,
    },
  ],
  'array-callback-return': [
    'error',
    {
      allowImplicit: false,
      checkForEach: false,
    },
  ],
  'use-isnan': [
    'error',
    {
      enforceForSwitchCase: true,
      enforceForIndexOf: true,
    },
  ],
  'operator-linebreak': ['error', 'after', { overrides: { '|>': 'before', '?': 'before', ':': 'before' } }],
  'no-use-before-define': ['error', { functions: false, variables: false, classes: false }],
  'padded-blocks': ['error', { switches: 'never', classes: 'never', blocks: 'never' }],
  'accessor-pairs': ['error', { enforceForClassMembers: true, setWithoutGet: true }],
  'computed-property-spacing': ['error', 'never', { enforceForClassMembers: true }],
  quotes: ['error', 'single', { allowTemplateLiterals: false, avoidEscape: true }],
  'object-property-newline': ['error', { allowMultiplePropertiesPerLine: true }],
  'new-cap': ['error', { properties: true, capIsNew: false, newIsCap: true }],
  'object-curly-newline': ['error', { consistent: true, multiline: true }],
  'prefer-regex-literals': ['error', { disallowRedundantWrapping: true }],
  'no-multiple-empty-lines': ['error', { maxBOF: 0, maxEOF: 0, max: 1 }],
  'generator-star-spacing': ['error', { before: true, after: true }],
  'key-spacing': ['error', { beforeColon: false, afterColon: true }],
  'wrap-iife': ['error', 'any', { functionPrototypeMethods: true }],
  'no-labels': ['error', { allowSwitch: false, allowLoop: false }],
  'no-unneeded-ternary': ['error', { defaultAssignment: false }],
  'space-unary-ops': ['error', { nonwords: false, words: true }],
  'brace-style': ['error', '1tbs', { allowSingleLine: true }],
  'keyword-spacing': ['error', { before: true, after: true }],
  'comma-spacing': ['error', { before: false, after: true }],
  'valid-typeof': ['error', { requireStringLiterals: true }],
  'arrow-spacing': ['error', { before: true, after: true }],
  'no-constant-condition': ['error', { checkLoops: false }],
  'semi-spacing': ['error', { before: false, after: true }],
  'no-redeclare': ['error', { builtinGlobals: false }],
  'prefer-const': ['error', { destructuring: 'all' }],
  'dot-notation': ['error', { allowKeywords: true }],
  'multiline-ternary': ['error', 'always-multiline'],
  'space-before-function-paren': ['error', 'always'],
  'no-empty': ['error', { allowEmptyCatch: true }],
  eqeqeq: ['error', 'always', { null: 'ignore' }],
  'no-return-assign': ['error', 'except-parens'],
  'one-var': ['error', { initialized: 'never' }],
  'no-self-assign': ['error', { props: true }],
  'template-curly-spacing': ['error', 'never'],
  'array-bracket-spacing': ['error', 'never'],
  'object-curly-spacing': ['error', 'always'],
  'object-shorthand': ['warn', 'properties'],
  'space-before-blocks': ['error', 'always'],
  'template-tag-spacing': ['error', 'never'],
  'no-extra-parens': ['error', 'functions'],
  'rest-spread-spacing': ['error', 'never'],
  'no-misleading-character-class': 'error',
  'no-whitespace-before-property': 'error',
  'func-call-spacing': ['error', 'never'],
  'no-unmodified-loop-condition': 'error',
  'prefer-promise-reject-errors': 'error',
  'yield-star-spacing': ['error', 'both'],
  'no-template-curly-in-string': 'error',
  'dot-location': ['error', 'property'],
  'no-shadow-restricted-names': 'error',
  'quote-props': ['error', 'as-needed'],
  'space-in-parens': ['error', 'never'],
  'block-spacing': ['error', 'always'],
  'no-async-promise-executor': 'error',
  'no-useless-backreference': 'error',
  'no-empty-character-class': 'error',
  'no-mixed-spaces-and-tabs': 'error',
  'no-irregular-whitespace': 'error',
  'no-unexpected-multiline': 'error',
  'no-useless-computed-key': 'error',
  'no-useless-constructor': 'error',
  'unicode-bom': ['error', 'never'],
  'comma-style': ['error', 'last'],
  'no-dupe-class-members': 'error',
  'no-extra-boolean-cast': 'error',
  'no-prototype-builtins': 'error',
  'no-array-constructor': 'error',
  'no-case-declarations': 'error',
  'no-loss-of-precision': 'error',
  'no-this-before-super': 'error',
  curly: ['error', 'multi-line'],
  'no-compare-neg-zero': 'error',
  'no-floating-decimal': 'error',
  'no-unreachable-loop': 'error',
  'no-trailing-spaces': 'error',
  'no-unsafe-negation': 'error',
  'symbol-description': 'error',
  'constructor-super': 'error',
  'default-case-last': 'error',
  'no-duplicate-case': 'error',
  'no-invalid-regexp': 'error',
  'no-unsafe-finally': 'error',
  'no-useless-escape': 'error',
  'no-useless-rename': 'error',
  'no-useless-return': 'error',
  'no-control-regex': 'error',
  'no-empty-pattern': 'error',
  'no-extend-native': 'error',
  'no-global-assign': 'error',
  'no-import-assign': 'error',
  'no-useless-catch': 'error',
  'no-sparse-arrays': 'error',
  'no-throw-literal': 'error',
  'no-class-assign': 'error',
  'no-const-assign': 'error',
  'no-implied-eval': 'error',
  'no-multi-spaces': 'error',
  'no-new-wrappers': 'error',
  'no-octal-escape': 'error',
  'no-regex-spaces': 'error',
  'no-self-compare': 'error',
  'no-useless-call': 'error',
  'space-infix-ops': 'error',
  'no-cond-assign': 'error',
  'no-fallthrough': 'error',
  'no-func-assign': 'error',
  'no-lone-blocks': 'error',
  'no-unreachable': 'error',
  'no-delete-var': 'error',
  'no-extra-bind': 'error',
  'no-new-object': 'error',
  'no-new-symbol': 'error',
  'no-undef-init': 'error',
  semi: ['error', 'never'],
  yoda: ['error', 'never'],
  'no-dupe-args': 'error',
  'no-dupe-keys': 'error',
  'no-ex-assign': 'error',
  'no-multi-str': 'error',
  'no-obj-calls': 'error',
  'no-sequences': 'error',
  'no-debugger': 'error',
  'no-iterator': 'error',
  'no-new-func': 'error',
  'new-parens': 'error',
  'no-caller': 'error',
  'eol-last': 'error',
  'no-octal': 'error',
  'no-proto': 'error',
  'no-undef': 'error',
  'no-eval': 'error',
  'no-tabs': 'error',
  'no-void': 'error',
  'no-with': 'error',
  'no-new': 'error',
  'no-var': 'warn',
}
